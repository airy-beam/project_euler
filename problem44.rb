#Problem 44
#
#Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
#The first ten pentagonal numbers are:
#
#1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
#70 − 22 = 48, is not pentagonal.
#
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
#difference is pentagonal and D = |Pk − Pj| is minimised;
#what is the value of D?

require 'mathn'

class Integer
  def is_pentagonal?
    n = 0.0
    n = (1/6) + 1/6 * Math::sqrt(1 + 24 * self)
    if n.integer? then true else false end
  end
end

pentagonal_numbers = [ 1 ]
is_pentagonal = Hash.new
is_pentagonal[ 1 ] = true
found = false
best_difference = 0
best_first_number, best_second_number = 0, 0
first_number, second_number = 0, 0
neighboring_difference = 0
n = 2
until ( found ) and ( best_difference < neighboring_difference ) do
  next_number = n * (3 * n - 1) / 2
  pentagonal_numbers << ( next_number )
  is_pentagonal[ next_number ] = true
  neighboring_difference = next_number -
    pentagonal_numbers [ pentagonal_numbers.size - 2 ]
  second_number = next_number
  first_number_index = n - 1
  difference = 0
  until ( found and ( difference > best_difference ) ) or
        ( first_number_index < 0 )
    first_number = pentagonal_numbers[ first_number_index ]
    difference = second_number - first_number
    if is_pentagonal[ difference ] then
       if (second_number + first_number).is_pentagonal?
         if ( not found ) or ( found and ( difference < best_difference ) ) then
           found = true
           best_difference = difference
           best_first_number = first_number
           best_second_number = second_number
         end
      end
    end
    first_number_index -= 1
  end
  n += 1
end
print best_difference, " (", best_first_number, " ", best_second_number, ")\n"
